// Code generated by protoc-gen-go. DO NOT EDIT.
// source: push_event.proto

package vcs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VcsType int32

const (
	VcsType_UNKNOWN          VcsType = 0
	VcsType_BITBUCKET_SERVER VcsType = 1
	VcsType_GITHUB           VcsType = 2
)

var VcsType_name = map[int32]string{
	0: "UNKNOWN",
	1: "BITBUCKET_SERVER",
	2: "GITHUB",
}
var VcsType_value = map[string]int32{
	"UNKNOWN":          0,
	"BITBUCKET_SERVER": 1,
	"GITHUB":           2,
}

func (x VcsType) String() string {
	return proto.EnumName(VcsType_name, int32(x))
}
func (VcsType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type PushCommit struct {
	Sha       string        `protobuf:"bytes,1,opt,name=sha" json:"sha,omitempty"`
	Id        string        `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	TreeId    string        `protobuf:"bytes,3,opt,name=tree_id,json=treeId" json:"tree_id,omitempty"`
	Distinct  bool          `protobuf:"varint,4,opt,name=distinct" json:"distinct,omitempty"`
	Message   string        `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
	Timestamp string        `protobuf:"bytes,6,opt,name=timestamp" json:"timestamp,omitempty"`
	Url       string        `protobuf:"bytes,7,opt,name=url" json:"url,omitempty"`
	Author    *CommitAuthor `protobuf:"bytes,8,opt,name=author" json:"author,omitempty"`
	Committer *CommitAuthor `protobuf:"bytes,9,opt,name=committer" json:"committer,omitempty"`
	Added     []string      `protobuf:"bytes,10,rep,name=added" json:"added,omitempty"`
	Removed   []string      `protobuf:"bytes,11,rep,name=removed" json:"removed,omitempty"`
	Modified  []string      `protobuf:"bytes,12,rep,name=modified" json:"modified,omitempty"`
}

func (m *PushCommit) Reset()                    { *m = PushCommit{} }
func (m *PushCommit) String() string            { return proto.CompactTextString(m) }
func (*PushCommit) ProtoMessage()               {}
func (*PushCommit) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *PushCommit) GetSha() string {
	if m != nil {
		return m.Sha
	}
	return ""
}

func (m *PushCommit) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PushCommit) GetTreeId() string {
	if m != nil {
		return m.TreeId
	}
	return ""
}

func (m *PushCommit) GetDistinct() bool {
	if m != nil {
		return m.Distinct
	}
	return false
}

func (m *PushCommit) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PushCommit) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *PushCommit) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *PushCommit) GetAuthor() *CommitAuthor {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *PushCommit) GetCommitter() *CommitAuthor {
	if m != nil {
		return m.Committer
	}
	return nil
}

func (m *PushCommit) GetAdded() []string {
	if m != nil {
		return m.Added
	}
	return nil
}

func (m *PushCommit) GetRemoved() []string {
	if m != nil {
		return m.Removed
	}
	return nil
}

func (m *PushCommit) GetModified() []string {
	if m != nil {
		return m.Modified
	}
	return nil
}

type VcsPushEvent struct {
	Ref          string        `protobuf:"bytes,1,opt,name=ref" json:"ref,omitempty"`
	Created      bool          `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
	Deleted      bool          `protobuf:"varint,5,opt,name=deleted" json:"deleted,omitempty"`
	Forced       bool          `protobuf:"varint,6,opt,name=forced" json:"forced,omitempty"`
	Commits      []*PushCommit `protobuf:"bytes,9,rep,name=commits" json:"commits,omitempty"`
	HeadCommit   *PushCommit   `protobuf:"bytes,10,opt,name=head_commit,json=headCommit" json:"head_commit,omitempty"`
	Repository   *Repository   `protobuf:"bytes,11,opt,name=repository" json:"repository,omitempty"`
	Pusher       *CommitAuthor `protobuf:"bytes,12,opt,name=pusher" json:"pusher,omitempty"`
	Sender       *User         `protobuf:"bytes,13,opt,name=sender" json:"sender,omitempty"`
	Organization *User         `protobuf:"bytes,15,opt,name=organization" json:"organization,omitempty"`
	VcsType      VcsType       `protobuf:"varint,16,opt,name=vcs_type,json=vcsType,enum=vcs.VcsType" json:"vcs_type,omitempty"`
}

func (m *VcsPushEvent) Reset()                    { *m = VcsPushEvent{} }
func (m *VcsPushEvent) String() string            { return proto.CompactTextString(m) }
func (*VcsPushEvent) ProtoMessage()               {}
func (*VcsPushEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *VcsPushEvent) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *VcsPushEvent) GetCreated() bool {
	if m != nil {
		return m.Created
	}
	return false
}

func (m *VcsPushEvent) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *VcsPushEvent) GetForced() bool {
	if m != nil {
		return m.Forced
	}
	return false
}

func (m *VcsPushEvent) GetCommits() []*PushCommit {
	if m != nil {
		return m.Commits
	}
	return nil
}

func (m *VcsPushEvent) GetHeadCommit() *PushCommit {
	if m != nil {
		return m.HeadCommit
	}
	return nil
}

func (m *VcsPushEvent) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *VcsPushEvent) GetPusher() *CommitAuthor {
	if m != nil {
		return m.Pusher
	}
	return nil
}

func (m *VcsPushEvent) GetSender() *User {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *VcsPushEvent) GetOrganization() *User {
	if m != nil {
		return m.Organization
	}
	return nil
}

func (m *VcsPushEvent) GetVcsType() VcsType {
	if m != nil {
		return m.VcsType
	}
	return VcsType_UNKNOWN
}

func init() {
	proto.RegisterType((*PushCommit)(nil), "vcs.PushCommit")
	proto.RegisterType((*VcsPushEvent)(nil), "vcs.VcsPushEvent")
	proto.RegisterEnum("vcs.VcsType", VcsType_name, VcsType_value)
}

func init() { proto.RegisterFile("push_event.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x5f, 0x6f, 0xd3, 0x30,
	0x10, 0x27, 0x0d, 0x4b, 0x9a, 0x4b, 0xd9, 0x82, 0x99, 0xc0, 0x9a, 0x78, 0x08, 0x7b, 0x21, 0x43,
	0x62, 0x43, 0xe3, 0x85, 0x57, 0x36, 0x55, 0x30, 0x4d, 0x1a, 0xc8, 0xb4, 0xe3, 0x31, 0x0a, 0xf1,
	0x75, 0xb5, 0xd4, 0x34, 0x91, 0xed, 0x44, 0x2a, 0x9f, 0x86, 0x2f, 0xc5, 0xf7, 0x41, 0xb6, 0x93,
	0x76, 0x80, 0xf6, 0xe6, 0xdf, 0x9f, 0x8b, 0xee, 0x7e, 0x77, 0x81, 0xa4, 0x69, 0xd5, 0x32, 0xc7,
	0x0e, 0xd7, 0xfa, 0xb4, 0x91, 0xb5, 0xae, 0x89, 0xdf, 0x95, 0xea, 0xe8, 0x59, 0x59, 0x57, 0x95,
	0xd0, 0x79, 0xd1, 0xea, 0x65, 0x2d, 0x9d, 0x72, 0x04, 0xad, 0xc2, 0xe1, 0x9d, 0x48, 0x6c, 0x6a,
	0x25, 0x74, 0x2d, 0x37, 0x8e, 0x39, 0xfe, 0x3d, 0x02, 0xf8, 0xda, 0xaa, 0xe5, 0xa5, 0xad, 0x24,
	0x09, 0xf8, 0x6a, 0x59, 0x50, 0x2f, 0xf5, 0xb2, 0x88, 0x99, 0x27, 0xd9, 0x87, 0x91, 0xe0, 0x74,
	0x64, 0x89, 0x91, 0xe0, 0xe4, 0x05, 0x84, 0x5a, 0x22, 0xe6, 0x82, 0x53, 0xdf, 0x92, 0x81, 0x81,
	0x57, 0x9c, 0x1c, 0xc1, 0x98, 0x0b, 0xa5, 0xc5, 0xba, 0xd4, 0xf4, 0x71, 0xea, 0x65, 0x63, 0xb6,
	0xc5, 0x84, 0x42, 0x58, 0xa1, 0x52, 0xc5, 0x1d, 0xd2, 0x3d, 0x5b, 0x34, 0x40, 0xf2, 0x12, 0x22,
	0x2d, 0x2a, 0x54, 0xba, 0xa8, 0x1a, 0x1a, 0x58, 0x6d, 0x47, 0x98, 0x76, 0x5a, 0xb9, 0xa2, 0xa1,
	0x6b, 0xa7, 0x95, 0x2b, 0x72, 0x02, 0x81, 0x9b, 0x8e, 0x8e, 0x53, 0x2f, 0x8b, 0xcf, 0x9f, 0x9e,
	0x76, 0xa5, 0x3a, 0x75, 0xdd, 0x7f, 0xb4, 0x02, 0xeb, 0x0d, 0xe4, 0x0c, 0x22, 0x97, 0x87, 0x46,
	0x49, 0xa3, 0x87, 0xdc, 0x3b, 0x0f, 0x39, 0x84, 0xbd, 0x82, 0x73, 0xe4, 0x14, 0x52, 0x3f, 0x8b,
	0x98, 0x03, 0xa6, 0x77, 0x89, 0x55, 0xdd, 0x21, 0xa7, 0xb1, 0xe5, 0x07, 0x68, 0x26, 0xae, 0x6a,
	0x2e, 0x16, 0x02, 0x39, 0x9d, 0x58, 0x69, 0x8b, 0x8f, 0x7f, 0xf9, 0x30, 0xb9, 0x2d, 0x95, 0x89,
	0x76, 0x6a, 0xd6, 0x64, 0x46, 0x91, 0xb8, 0x18, 0x92, 0x95, 0xb8, 0x30, 0x1f, 0x2e, 0x25, 0x16,
	0x1a, 0x79, 0x9f, 0xd7, 0x00, 0x8d, 0xc2, 0x71, 0x85, 0x46, 0xd9, 0x73, 0x4a, 0x0f, 0xc9, 0x73,
	0x08, 0x16, 0xb5, 0x2c, 0x91, 0xdb, 0xac, 0xc6, 0xac, 0x47, 0xe4, 0x04, 0x42, 0x37, 0x87, 0xa2,
	0x51, 0xea, 0x67, 0xf1, 0xf9, 0x81, 0x9d, 0x74, 0xb7, 0x59, 0x36, 0xe8, 0xe4, 0x1d, 0xc4, 0x4b,
	0x2c, 0x78, 0xee, 0x30, 0x05, 0x1b, 0xcc, 0x7f, 0x76, 0x30, 0x9e, 0xfe, 0x28, 0xce, 0x00, 0x76,
	0x77, 0x43, 0xe3, 0x7b, 0x05, 0x6c, 0x4b, 0xb3, 0x7b, 0x16, 0xb3, 0x24, 0x73, 0xa0, 0x28, 0xe9,
	0xe4, 0xc1, 0x25, 0x39, 0x03, 0x79, 0x05, 0x81, 0xc2, 0x35, 0x47, 0x49, 0x9f, 0x58, 0x6b, 0x64,
	0xad, 0x73, 0x85, 0x92, 0xf5, 0x02, 0x79, 0x0b, 0x93, 0x5a, 0xde, 0x15, 0x6b, 0xf1, 0xb3, 0xd0,
	0xa2, 0x5e, 0xd3, 0x83, 0x7f, 0x8d, 0x7f, 0xc9, 0xe4, 0x35, 0x8c, 0xbb, 0x52, 0xe5, 0x7a, 0xd3,
	0x20, 0x4d, 0x52, 0x2f, 0xdb, 0x3f, 0x9f, 0x58, 0xeb, 0x6d, 0xa9, 0x66, 0x9b, 0x06, 0x59, 0xd8,
	0xb9, 0xc7, 0x9b, 0x0f, 0x10, 0xf6, 0x1c, 0x89, 0x21, 0x9c, 0xdf, 0x5c, 0xdf, 0x7c, 0xf9, 0x7e,
	0x93, 0x3c, 0x22, 0x87, 0x90, 0x5c, 0x5c, 0xcd, 0x2e, 0xe6, 0x97, 0xd7, 0xd3, 0x59, 0xfe, 0x6d,
	0xca, 0x6e, 0xa7, 0x2c, 0xf1, 0x08, 0x40, 0xf0, 0xe9, 0x6a, 0xf6, 0x79, 0x7e, 0x91, 0x8c, 0x7e,
	0x04, 0xf6, 0xdf, 0x79, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff, 0x65, 0x11, 0x23, 0xf2, 0x87, 0x03,
	0x00, 0x00,
}
