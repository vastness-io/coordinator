// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vcs_event.proto

package vcs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VcsEvent service

type VcsEventClient interface {
	OnPush(ctx context.Context, in *VcsPushEvent, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type vcsEventClient struct {
	cc *grpc.ClientConn
}

func NewVcsEventClient(cc *grpc.ClientConn) VcsEventClient {
	return &vcsEventClient{cc}
}

func (c *vcsEventClient) OnPush(ctx context.Context, in *VcsPushEvent, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/vcs.VcsEvent/OnPush", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VcsEvent service

type VcsEventServer interface {
	OnPush(context.Context, *VcsPushEvent) (*google_protobuf.Empty, error)
}

func RegisterVcsEventServer(s *grpc.Server, srv VcsEventServer) {
	s.RegisterService(&_VcsEvent_serviceDesc, srv)
}

func _VcsEvent_OnPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VcsPushEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VcsEventServer).OnPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vcs.VcsEvent/OnPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VcsEventServer).OnPush(ctx, req.(*VcsPushEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _VcsEvent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vcs.VcsEvent",
	HandlerType: (*VcsEventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnPush",
			Handler:    _VcsEvent_OnPush_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vcs_event.proto",
}

func init() { proto.RegisterFile("vcs_event.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x4b, 0x2e, 0x8e,
	0x4f, 0x2d, 0x4b, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x4b, 0x2e,
	0x96, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x0b, 0x25, 0x95, 0xa6, 0xe9, 0xa7,
	0xe6, 0x16, 0x94, 0x54, 0x42, 0x54, 0x48, 0x09, 0x14, 0x94, 0x16, 0x67, 0x20, 0xeb, 0x31, 0xb2,
	0xe7, 0xe2, 0x08, 0x4b, 0x2e, 0x76, 0x05, 0x89, 0x08, 0x19, 0x73, 0xb1, 0xf9, 0xe7, 0x05, 0x94,
	0x16, 0x67, 0x08, 0x09, 0xea, 0x95, 0x25, 0x17, 0xeb, 0x85, 0x25, 0x17, 0x83, 0x78, 0x60, 0x49,
	0x29, 0x31, 0x3d, 0x88, 0xc1, 0x7a, 0x30, 0x83, 0xf5, 0x5c, 0x41, 0x06, 0x27, 0xb1, 0x81, 0xf9,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x01, 0x4a, 0x97, 0x8e, 0x00, 0x00, 0x00,
}
