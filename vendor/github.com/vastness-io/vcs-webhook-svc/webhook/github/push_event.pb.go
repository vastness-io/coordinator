// Code generated by protoc-gen-go. DO NOT EDIT.
// source: push_event.proto

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PushCommit struct {
	Sha       string        `protobuf:"bytes,1,opt,name=sha" json:"sha,omitempty"`
	Id        string        `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	TreeId    string        `protobuf:"bytes,3,opt,name=tree_id,json=treeId" json:"tree_id,omitempty"`
	Distinct  bool          `protobuf:"varint,4,opt,name=distinct" json:"distinct,omitempty"`
	Message   string        `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
	Timestamp string        `protobuf:"bytes,6,opt,name=timestamp" json:"timestamp,omitempty"`
	Url       string        `protobuf:"bytes,7,opt,name=url" json:"url,omitempty"`
	Author    *CommitAuthor `protobuf:"bytes,8,opt,name=author" json:"author,omitempty"`
	Committer *CommitAuthor `protobuf:"bytes,9,opt,name=committer" json:"committer,omitempty"`
	Added     []string      `protobuf:"bytes,10,rep,name=added" json:"added,omitempty"`
	Removed   []string      `protobuf:"bytes,11,rep,name=removed" json:"removed,omitempty"`
	Modified  []string      `protobuf:"bytes,12,rep,name=modified" json:"modified,omitempty"`
}

func (m *PushCommit) Reset()                    { *m = PushCommit{} }
func (m *PushCommit) String() string            { return proto.CompactTextString(m) }
func (*PushCommit) ProtoMessage()               {}
func (*PushCommit) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *PushCommit) GetSha() string {
	if m != nil {
		return m.Sha
	}
	return ""
}

func (m *PushCommit) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PushCommit) GetTreeId() string {
	if m != nil {
		return m.TreeId
	}
	return ""
}

func (m *PushCommit) GetDistinct() bool {
	if m != nil {
		return m.Distinct
	}
	return false
}

func (m *PushCommit) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PushCommit) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *PushCommit) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *PushCommit) GetAuthor() *CommitAuthor {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *PushCommit) GetCommitter() *CommitAuthor {
	if m != nil {
		return m.Committer
	}
	return nil
}

func (m *PushCommit) GetAdded() []string {
	if m != nil {
		return m.Added
	}
	return nil
}

func (m *PushCommit) GetRemoved() []string {
	if m != nil {
		return m.Removed
	}
	return nil
}

func (m *PushCommit) GetModified() []string {
	if m != nil {
		return m.Modified
	}
	return nil
}

type PushEvent struct {
	Ref          string        `protobuf:"bytes,1,opt,name=ref" json:"ref,omitempty"`
	Before       string        `protobuf:"bytes,2,opt,name=before" json:"before,omitempty"`
	After        string        `protobuf:"bytes,3,opt,name=after" json:"after,omitempty"`
	Created      bool          `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
	Deleted      bool          `protobuf:"varint,5,opt,name=deleted" json:"deleted,omitempty"`
	Forced       bool          `protobuf:"varint,6,opt,name=forced" json:"forced,omitempty"`
	BaseRef      string        `protobuf:"bytes,7,opt,name=base_ref,json=baseRef" json:"base_ref,omitempty"`
	Compare      string        `protobuf:"bytes,8,opt,name=compare" json:"compare,omitempty"`
	Commits      []*PushCommit `protobuf:"bytes,9,rep,name=commits" json:"commits,omitempty"`
	HeadCommit   *PushCommit   `protobuf:"bytes,10,opt,name=head_commit,json=headCommit" json:"head_commit,omitempty"`
	Repository   *Repository   `protobuf:"bytes,11,opt,name=repository" json:"repository,omitempty"`
	Pusher       *CommitAuthor `protobuf:"bytes,12,opt,name=pusher" json:"pusher,omitempty"`
	Sender       *User         `protobuf:"bytes,13,opt,name=sender" json:"sender,omitempty"`
	Installation *Installation `protobuf:"bytes,14,opt,name=installation" json:"installation,omitempty"`
	Organization *User         `protobuf:"bytes,15,opt,name=organization" json:"organization,omitempty"`
}

func (m *PushEvent) Reset()                    { *m = PushEvent{} }
func (m *PushEvent) String() string            { return proto.CompactTextString(m) }
func (*PushEvent) ProtoMessage()               {}
func (*PushEvent) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *PushEvent) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *PushEvent) GetBefore() string {
	if m != nil {
		return m.Before
	}
	return ""
}

func (m *PushEvent) GetAfter() string {
	if m != nil {
		return m.After
	}
	return ""
}

func (m *PushEvent) GetCreated() bool {
	if m != nil {
		return m.Created
	}
	return false
}

func (m *PushEvent) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *PushEvent) GetForced() bool {
	if m != nil {
		return m.Forced
	}
	return false
}

func (m *PushEvent) GetBaseRef() string {
	if m != nil {
		return m.BaseRef
	}
	return ""
}

func (m *PushEvent) GetCompare() string {
	if m != nil {
		return m.Compare
	}
	return ""
}

func (m *PushEvent) GetCommits() []*PushCommit {
	if m != nil {
		return m.Commits
	}
	return nil
}

func (m *PushEvent) GetHeadCommit() *PushCommit {
	if m != nil {
		return m.HeadCommit
	}
	return nil
}

func (m *PushEvent) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *PushEvent) GetPusher() *CommitAuthor {
	if m != nil {
		return m.Pusher
	}
	return nil
}

func (m *PushEvent) GetSender() *User {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *PushEvent) GetInstallation() *Installation {
	if m != nil {
		return m.Installation
	}
	return nil
}

func (m *PushEvent) GetOrganization() *User {
	if m != nil {
		return m.Organization
	}
	return nil
}

func init() {
	proto.RegisterType((*PushCommit)(nil), "github.PushCommit")
	proto.RegisterType((*PushEvent)(nil), "github.PushEvent")
}

func init() { proto.RegisterFile("push_event.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xcd, 0x8a, 0xdb, 0x30,
	0x10, 0x26, 0xc9, 0xc6, 0xb1, 0xc7, 0xee, 0x36, 0xa8, 0x4b, 0xab, 0x86, 0x1e, 0xcc, 0xd2, 0x83,
	0x0f, 0x4b, 0x28, 0xd9, 0x4b, 0xaf, 0xa5, 0xf4, 0xb0, 0xb7, 0x22, 0xe8, 0xd9, 0x28, 0xd1, 0x38,
	0x16, 0xd8, 0x96, 0x91, 0xe4, 0x85, 0xf6, 0x75, 0xfa, 0x58, 0x7d, 0x99, 0x22, 0xc9, 0xce, 0x0f,
	0x2c, 0x7b, 0xf3, 0xf7, 0x33, 0xd2, 0xcc, 0xe7, 0x11, 0xac, 0xfb, 0xc1, 0xd4, 0x25, 0x3e, 0x63,
	0x67, 0xb7, 0xbd, 0x56, 0x56, 0x91, 0xe8, 0x28, 0x6d, 0x3d, 0xec, 0x37, 0x30, 0x18, 0xd4, 0x81,
	0xdb, 0xbc, 0x3b, 0xa8, 0xb6, 0x95, 0xb6, 0xe4, 0x83, 0xad, 0xd5, 0x44, 0xae, 0x35, 0xf6, 0xca,
	0x48, 0xab, 0xf4, 0xef, 0x91, 0x21, 0xb2, 0x33, 0x96, 0x37, 0x0d, 0xb7, 0x52, 0x75, 0x81, 0xbb,
	0xff, 0x37, 0x07, 0xf8, 0x39, 0x98, 0xfa, 0xbb, 0x3f, 0x81, 0xac, 0x61, 0x61, 0x6a, 0x4e, 0x67,
	0xf9, 0xac, 0x48, 0x98, 0xfb, 0x24, 0xb7, 0x30, 0x97, 0x82, 0xce, 0x3d, 0x31, 0x97, 0x82, 0x7c,
	0x80, 0x95, 0xd5, 0x88, 0xa5, 0x14, 0x74, 0xe1, 0xc9, 0xc8, 0xc1, 0x27, 0x41, 0x36, 0x10, 0x0b,
	0x69, 0xac, 0xec, 0x0e, 0x96, 0xde, 0xe4, 0xb3, 0x22, 0x66, 0x27, 0x4c, 0x28, 0xac, 0x5a, 0x34,
	0x86, 0x1f, 0x91, 0x2e, 0x7d, 0xd1, 0x04, 0xc9, 0x27, 0x48, 0xac, 0x6c, 0xd1, 0x58, 0xde, 0xf6,
	0x34, 0xf2, 0xda, 0x99, 0x70, 0xed, 0x0c, 0xba, 0xa1, 0xab, 0xd0, 0xce, 0xa0, 0x1b, 0xf2, 0x00,
	0x51, 0x98, 0x92, 0xc6, 0xf9, 0xac, 0x48, 0x77, 0x77, 0xdb, 0x90, 0xc7, 0x36, 0x0c, 0xf0, 0xcd,
	0x6b, 0x6c, 0xf4, 0x90, 0x1d, 0x24, 0x21, 0x1a, 0x8b, 0x9a, 0x26, 0xaf, 0x14, 0x9c, 0x6d, 0xe4,
	0x0e, 0x96, 0x5c, 0x08, 0x14, 0x14, 0xf2, 0x45, 0x91, 0xb0, 0x00, 0xdc, 0x04, 0x1a, 0x5b, 0xf5,
	0x8c, 0x82, 0xa6, 0x9e, 0x9f, 0xa0, 0x9b, 0xbb, 0x55, 0x42, 0x56, 0x12, 0x05, 0xcd, 0xbc, 0x74,
	0xc2, 0xf7, 0x7f, 0x6f, 0x20, 0x71, 0xe9, 0xfe, 0x70, 0x3f, 0xd0, 0x4d, 0xa3, 0xb1, 0x9a, 0xc2,
	0xd5, 0x58, 0x91, 0xf7, 0x10, 0xed, 0xb1, 0x52, 0x1a, 0xc7, 0x80, 0x47, 0xe4, 0x7b, 0xa8, 0x5c,
	0xcf, 0x21, 0xe2, 0x00, 0x5c, 0x0f, 0x07, 0x8d, 0xdc, 0xa2, 0x18, 0x03, 0x9e, 0xa0, 0x53, 0x04,
	0x36, 0xe8, 0x94, 0x65, 0x50, 0x46, 0xe8, 0x6e, 0xa8, 0x94, 0x3e, 0xa0, 0xf0, 0xe1, 0xc6, 0x6c,
	0x44, 0xe4, 0x23, 0xc4, 0x7b, 0x6e, 0xb0, 0x74, 0x0d, 0x85, 0x78, 0x57, 0x0e, 0x33, 0xac, 0xfc,
	0x35, 0xaa, 0xed, 0xb9, 0x46, 0x9f, 0x71, 0xc2, 0x26, 0x48, 0x1e, 0xbc, 0xd2, 0x4a, 0x6b, 0x68,
	0x92, 0x2f, 0x8a, 0x74, 0x47, 0xa6, 0x30, 0xcf, 0x2b, 0xc4, 0x26, 0x0b, 0x79, 0x84, 0xb4, 0x46,
	0x2e, 0xca, 0x80, 0x29, 0xf8, 0xf8, 0x5f, 0xaa, 0x00, 0x67, 0x1b, 0x17, 0x70, 0x07, 0x70, 0xde,
	0x5b, 0x9a, 0x5e, 0xd7, 0xb0, 0x93, 0xc2, 0x2e, 0x5c, 0x6e, 0x27, 0xdc, 0x33, 0x41, 0x4d, 0xb3,
	0xd7, 0x76, 0x22, 0x78, 0xc8, 0x67, 0x88, 0x0c, 0x76, 0x02, 0x35, 0x7d, 0xe3, 0xdd, 0xd9, 0xe4,
	0xfe, 0x65, 0x50, 0xb3, 0x51, 0x23, 0x5f, 0x21, 0xbb, 0x7c, 0x2d, 0xf4, 0xf6, 0xfa, 0xe4, 0xa7,
	0x0b, 0x8d, 0x5d, 0x39, 0xc9, 0x17, 0xc8, 0x94, 0x3e, 0xf2, 0x4e, 0xfe, 0x09, 0x95, 0x6f, 0x5f,
	0xb8, 0xe5, 0xca, 0xb1, 0x8f, 0xfc, 0x53, 0x7c, 0xfc, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x97,
	0xba, 0x56, 0xed, 0x03, 0x00, 0x00,
}
