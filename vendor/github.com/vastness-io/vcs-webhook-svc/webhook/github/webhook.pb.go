// Code generated by protoc-gen-go. DO NOT EDIT.
// source: webhook.proto

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GithubWebhook service

type GithubWebhookClient interface {
	OnPush(ctx context.Context, in *PushEvent, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type githubWebhookClient struct {
	cc *grpc.ClientConn
}

func NewGithubWebhookClient(cc *grpc.ClientConn) GithubWebhookClient {
	return &githubWebhookClient{cc}
}

func (c *githubWebhookClient) OnPush(ctx context.Context, in *PushEvent, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/github.GithubWebhook/OnPush", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GithubWebhook service

type GithubWebhookServer interface {
	OnPush(context.Context, *PushEvent) (*google_protobuf.Empty, error)
}

func RegisterGithubWebhookServer(s *grpc.Server, srv GithubWebhookServer) {
	s.RegisterService(&_GithubWebhook_serviceDesc, srv)
}

func _GithubWebhook_OnPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubWebhookServer).OnPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.GithubWebhook/OnPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubWebhookServer).OnPush(ctx, req.(*PushEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _GithubWebhook_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.GithubWebhook",
	HandlerType: (*GithubWebhookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnPush",
			Handler:    _GithubWebhook_OnPush_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webhook.proto",
}

func init() { proto.RegisterFile("webhook.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4f, 0x4d, 0xca,
	0xc8, 0xcf, 0xcf, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0xcf, 0x2c, 0xc9, 0x28,
	0x4d, 0x92, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x8b, 0x26, 0x95, 0xa6, 0xe9,
	0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0x14, 0x49, 0x09, 0x14, 0x94, 0x16, 0x67, 0xc4, 0xa7, 0x96,
	0xa5, 0xe6, 0x95, 0x40, 0x44, 0x8c, 0xdc, 0xb8, 0x78, 0xdd, 0xc1, 0x1a, 0xc3, 0x21, 0xa6, 0x09,
	0x99, 0x72, 0xb1, 0xf9, 0xe7, 0x05, 0x94, 0x16, 0x67, 0x08, 0x09, 0xea, 0x41, 0x8c, 0xd4, 0x03,
	0xf1, 0x5c, 0x41, 0x7a, 0xa4, 0xc4, 0xf4, 0x20, 0xa6, 0xeb, 0xc1, 0x4c, 0xd7, 0x73, 0x05, 0x99,
	0xae, 0xc4, 0x90, 0xc4, 0x06, 0x16, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x37, 0x63,
	0x39, 0x96, 0x00, 0x00, 0x00,
}
