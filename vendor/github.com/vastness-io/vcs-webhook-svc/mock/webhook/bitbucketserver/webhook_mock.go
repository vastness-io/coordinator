// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vastness-io/vcs-webhook-svc/webhook/bitbucketserver (interfaces: BitbucketServerPostWebhookClient,BitbucketServerPostWebhookServer)

// Package mock_bitbucketserver is a generated GoMock package.
package mock_bitbucketserver

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	bitbucketserver "github.com/vastness-io/vcs-webhook-svc/webhook/bitbucketserver"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockBitbucketServerPostWebhookClient is a mock of BitbucketServerPostWebhookClient interface
type MockBitbucketServerPostWebhookClient struct {
	ctrl     *gomock.Controller
	recorder *MockBitbucketServerPostWebhookClientMockRecorder
}

// MockBitbucketServerPostWebhookClientMockRecorder is the mock recorder for MockBitbucketServerPostWebhookClient
type MockBitbucketServerPostWebhookClientMockRecorder struct {
	mock *MockBitbucketServerPostWebhookClient
}

// NewMockBitbucketServerPostWebhookClient creates a new mock instance
func NewMockBitbucketServerPostWebhookClient(ctrl *gomock.Controller) *MockBitbucketServerPostWebhookClient {
	mock := &MockBitbucketServerPostWebhookClient{ctrl: ctrl}
	mock.recorder = &MockBitbucketServerPostWebhookClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBitbucketServerPostWebhookClient) EXPECT() *MockBitbucketServerPostWebhookClientMockRecorder {
	return m.recorder
}

// OnPush mocks base method
func (m *MockBitbucketServerPostWebhookClient) OnPush(arg0 context.Context, arg1 *bitbucketserver.PostWebhook, arg2 ...grpc.CallOption) (*empty.Empty, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OnPush", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnPush indicates an expected call of OnPush
func (mr *MockBitbucketServerPostWebhookClientMockRecorder) OnPush(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPush", reflect.TypeOf((*MockBitbucketServerPostWebhookClient)(nil).OnPush), varargs...)
}

// MockBitbucketServerPostWebhookServer is a mock of BitbucketServerPostWebhookServer interface
type MockBitbucketServerPostWebhookServer struct {
	ctrl     *gomock.Controller
	recorder *MockBitbucketServerPostWebhookServerMockRecorder
}

// MockBitbucketServerPostWebhookServerMockRecorder is the mock recorder for MockBitbucketServerPostWebhookServer
type MockBitbucketServerPostWebhookServerMockRecorder struct {
	mock *MockBitbucketServerPostWebhookServer
}

// NewMockBitbucketServerPostWebhookServer creates a new mock instance
func NewMockBitbucketServerPostWebhookServer(ctrl *gomock.Controller) *MockBitbucketServerPostWebhookServer {
	mock := &MockBitbucketServerPostWebhookServer{ctrl: ctrl}
	mock.recorder = &MockBitbucketServerPostWebhookServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBitbucketServerPostWebhookServer) EXPECT() *MockBitbucketServerPostWebhookServerMockRecorder {
	return m.recorder
}

// OnPush mocks base method
func (m *MockBitbucketServerPostWebhookServer) OnPush(arg0 context.Context, arg1 *bitbucketserver.PostWebhook) (*empty.Empty, error) {
	ret := m.ctrl.Call(m, "OnPush", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnPush indicates an expected call of OnPush
func (mr *MockBitbucketServerPostWebhookServerMockRecorder) OnPush(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPush", reflect.TypeOf((*MockBitbucketServerPostWebhookServer)(nil).OnPush), arg0, arg1)
}
