// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vastness-io/vcs-webhook-svc/webhook/github (interfaces: GithubWebhookClient,GithubWebhookServer)

// Package mock_github is a generated GoMock package.
package mock_github

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	github "github.com/vastness-io/vcs-webhook-svc/webhook/github"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockGithubWebhookClient is a mock of GithubWebhookClient interface
type MockGithubWebhookClient struct {
	ctrl     *gomock.Controller
	recorder *MockGithubWebhookClientMockRecorder
}

// MockGithubWebhookClientMockRecorder is the mock recorder for MockGithubWebhookClient
type MockGithubWebhookClientMockRecorder struct {
	mock *MockGithubWebhookClient
}

// NewMockGithubWebhookClient creates a new mock instance
func NewMockGithubWebhookClient(ctrl *gomock.Controller) *MockGithubWebhookClient {
	mock := &MockGithubWebhookClient{ctrl: ctrl}
	mock.recorder = &MockGithubWebhookClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGithubWebhookClient) EXPECT() *MockGithubWebhookClientMockRecorder {
	return m.recorder
}

// OnPush mocks base method
func (m *MockGithubWebhookClient) OnPush(arg0 context.Context, arg1 *github.PushEvent, arg2 ...grpc.CallOption) (*empty.Empty, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OnPush", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnPush indicates an expected call of OnPush
func (mr *MockGithubWebhookClientMockRecorder) OnPush(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPush", reflect.TypeOf((*MockGithubWebhookClient)(nil).OnPush), varargs...)
}

// MockGithubWebhookServer is a mock of GithubWebhookServer interface
type MockGithubWebhookServer struct {
	ctrl     *gomock.Controller
	recorder *MockGithubWebhookServerMockRecorder
}

// MockGithubWebhookServerMockRecorder is the mock recorder for MockGithubWebhookServer
type MockGithubWebhookServerMockRecorder struct {
	mock *MockGithubWebhookServer
}

// NewMockGithubWebhookServer creates a new mock instance
func NewMockGithubWebhookServer(ctrl *gomock.Controller) *MockGithubWebhookServer {
	mock := &MockGithubWebhookServer{ctrl: ctrl}
	mock.recorder = &MockGithubWebhookServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGithubWebhookServer) EXPECT() *MockGithubWebhookServerMockRecorder {
	return m.recorder
}

// OnPush mocks base method
func (m *MockGithubWebhookServer) OnPush(arg0 context.Context, arg1 *github.PushEvent) (*empty.Empty, error) {
	ret := m.ctrl.Call(m, "OnPush", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnPush indicates an expected call of OnPush
func (mr *MockGithubWebhookServerMockRecorder) OnPush(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPush", reflect.TypeOf((*MockGithubWebhookServer)(nil).OnPush), arg0, arg1)
}
