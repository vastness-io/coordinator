// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vastness-io/vcs-webhook-svc/webhook (interfaces: VcsEventClient,VcsEventServer)

// Package mock_webhook is a generated GoMock package.
package mock_webhook

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	webhook "github.com/vastness-io/vcs-webhook-svc/webhook"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockVcsEventClient is a mock of VcsEventClient interface
type MockVcsEventClient struct {
	ctrl     *gomock.Controller
	recorder *MockVcsEventClientMockRecorder
}

// MockVcsEventClientMockRecorder is the mock recorder for MockVcsEventClient
type MockVcsEventClientMockRecorder struct {
	mock *MockVcsEventClient
}

// NewMockVcsEventClient creates a new mock instance
func NewMockVcsEventClient(ctrl *gomock.Controller) *MockVcsEventClient {
	mock := &MockVcsEventClient{ctrl: ctrl}
	mock.recorder = &MockVcsEventClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVcsEventClient) EXPECT() *MockVcsEventClientMockRecorder {
	return m.recorder
}

// OnPush mocks base method
func (m *MockVcsEventClient) OnPush(arg0 context.Context, arg1 *webhook.VcsPushEvent, arg2 ...grpc.CallOption) (*empty.Empty, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OnPush", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnPush indicates an expected call of OnPush
func (mr *MockVcsEventClientMockRecorder) OnPush(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPush", reflect.TypeOf((*MockVcsEventClient)(nil).OnPush), varargs...)
}

// MockVcsEventServer is a mock of VcsEventServer interface
type MockVcsEventServer struct {
	ctrl     *gomock.Controller
	recorder *MockVcsEventServerMockRecorder
}

// MockVcsEventServerMockRecorder is the mock recorder for MockVcsEventServer
type MockVcsEventServerMockRecorder struct {
	mock *MockVcsEventServer
}

// NewMockVcsEventServer creates a new mock instance
func NewMockVcsEventServer(ctrl *gomock.Controller) *MockVcsEventServer {
	mock := &MockVcsEventServer{ctrl: ctrl}
	mock.recorder = &MockVcsEventServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVcsEventServer) EXPECT() *MockVcsEventServerMockRecorder {
	return m.recorder
}

// OnPush mocks base method
func (m *MockVcsEventServer) OnPush(arg0 context.Context, arg1 *webhook.VcsPushEvent) (*empty.Empty, error) {
	ret := m.ctrl.Call(m, "OnPush", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnPush indicates an expected call of OnPush
func (mr *MockVcsEventServerMockRecorder) OnPush(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPush", reflect.TypeOf((*MockVcsEventServer)(nil).OnPush), arg0, arg1)
}
