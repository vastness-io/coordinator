// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vastness-io/gormer (interfaces: DB)

package mock_gormer

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	"github.com/jinzhu/gorm"
	gormer "github.com/vastness-io/gormer"
	reflect "reflect"
)

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDB) EXPECT() *MockDBMockRecorder {
	return _m.recorder
}

// AddError mocks base method
func (_m *MockDB) AddError(_param0 error) error {
	ret := _m.ctrl.Call(_m, "AddError", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddError indicates an expected call of AddError
func (_mr *MockDBMockRecorder) AddError(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddError", reflect.TypeOf((*MockDB)(nil).AddError), arg0)
}

// AddForeignKey mocks base method
func (_m *MockDB) AddForeignKey(_param0 string, _param1 string, _param2 string, _param3 string) gormer.DB {
	ret := _m.ctrl.Call(_m, "AddForeignKey", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// AddForeignKey indicates an expected call of AddForeignKey
func (_mr *MockDBMockRecorder) AddForeignKey(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddForeignKey", reflect.TypeOf((*MockDB)(nil).AddForeignKey), arg0, arg1, arg2, arg3)
}

// AddIndex mocks base method
func (_m *MockDB) AddIndex(_param0 string, _param1 ...string) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AddIndex", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// AddIndex indicates an expected call of AddIndex
func (_mr *MockDBMockRecorder) AddIndex(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddIndex", reflect.TypeOf((*MockDB)(nil).AddIndex), _s...)
}

// AddUniqueIndex mocks base method
func (_m *MockDB) AddUniqueIndex(_param0 string, _param1 ...string) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AddUniqueIndex", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// AddUniqueIndex indicates an expected call of AddUniqueIndex
func (_mr *MockDBMockRecorder) AddUniqueIndex(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddUniqueIndex", reflect.TypeOf((*MockDB)(nil).AddUniqueIndex), _s...)
}

// Assign mocks base method
func (_m *MockDB) Assign(_param0 ...interface{}) gormer.DB {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Assign", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Assign indicates an expected call of Assign
func (_mr *MockDBMockRecorder) Assign(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Assign", reflect.TypeOf((*MockDB)(nil).Assign), arg0...)
}

// Association mocks base method
func (_m *MockDB) Association(_param0 string) *gorm.Association {
	ret := _m.ctrl.Call(_m, "Association", _param0)
	ret0, _ := ret[0].(*gorm.Association)
	return ret0
}

// Association indicates an expected call of Association
func (_mr *MockDBMockRecorder) Association(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Association", reflect.TypeOf((*MockDB)(nil).Association), arg0)
}

// Attrs mocks base method
func (_m *MockDB) Attrs(_param0 ...interface{}) gormer.DB {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Attrs", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Attrs indicates an expected call of Attrs
func (_mr *MockDBMockRecorder) Attrs(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Attrs", reflect.TypeOf((*MockDB)(nil).Attrs), arg0...)
}

// AutoMigrate mocks base method
func (_m *MockDB) AutoMigrate(_param0 ...interface{}) gormer.DB {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AutoMigrate", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// AutoMigrate indicates an expected call of AutoMigrate
func (_mr *MockDBMockRecorder) AutoMigrate(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AutoMigrate", reflect.TypeOf((*MockDB)(nil).AutoMigrate), arg0...)
}

// Begin mocks base method
func (_m *MockDB) Begin() gormer.DB {
	ret := _m.ctrl.Call(_m, "Begin")
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Begin indicates an expected call of Begin
func (_mr *MockDBMockRecorder) Begin() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Begin", reflect.TypeOf((*MockDB)(nil).Begin))
}

// BlockGlobalUpdate mocks base method
func (_m *MockDB) BlockGlobalUpdate(_param0 bool) gormer.DB {
	ret := _m.ctrl.Call(_m, "BlockGlobalUpdate", _param0)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// BlockGlobalUpdate indicates an expected call of BlockGlobalUpdate
func (_mr *MockDBMockRecorder) BlockGlobalUpdate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "BlockGlobalUpdate", reflect.TypeOf((*MockDB)(nil).BlockGlobalUpdate), arg0)
}

// Callback mocks base method
func (_m *MockDB) Callback() *gorm.Callback {
	ret := _m.ctrl.Call(_m, "Callback")
	ret0, _ := ret[0].(*gorm.Callback)
	return ret0
}

// Callback indicates an expected call of Callback
func (_mr *MockDBMockRecorder) Callback() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Callback", reflect.TypeOf((*MockDB)(nil).Callback))
}

// Close mocks base method
func (_m *MockDB) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockDBMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockDB)(nil).Close))
}

// Commit mocks base method
func (_m *MockDB) Commit() gormer.DB {
	ret := _m.ctrl.Call(_m, "Commit")
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Commit indicates an expected call of Commit
func (_mr *MockDBMockRecorder) Commit() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Commit", reflect.TypeOf((*MockDB)(nil).Commit))
}

// CommonDB mocks base method
func (_m *MockDB) CommonDB() gorm.SQLCommon {
	ret := _m.ctrl.Call(_m, "CommonDB")
	ret0, _ := ret[0].(gorm.SQLCommon)
	return ret0
}

// CommonDB indicates an expected call of CommonDB
func (_mr *MockDBMockRecorder) CommonDB() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CommonDB", reflect.TypeOf((*MockDB)(nil).CommonDB))
}

// Count mocks base method
func (_m *MockDB) Count(_param0 interface{}) gormer.DB {
	ret := _m.ctrl.Call(_m, "Count", _param0)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Count indicates an expected call of Count
func (_mr *MockDBMockRecorder) Count(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Count", reflect.TypeOf((*MockDB)(nil).Count), arg0)
}

// Create mocks base method
func (_m *MockDB) Create(_param0 interface{}) gormer.DB {
	ret := _m.ctrl.Call(_m, "Create", _param0)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Create indicates an expected call of Create
func (_mr *MockDBMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockDB)(nil).Create), arg0)
}

// CreateTable mocks base method
func (_m *MockDB) CreateTable(_param0 ...interface{}) gormer.DB {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateTable", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// CreateTable indicates an expected call of CreateTable
func (_mr *MockDBMockRecorder) CreateTable(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateTable", reflect.TypeOf((*MockDB)(nil).CreateTable), arg0...)
}

// DB mocks base method
func (_m *MockDB) DB() *sql.DB {
	ret := _m.ctrl.Call(_m, "DB")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// DB indicates an expected call of DB
func (_mr *MockDBMockRecorder) DB() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DB", reflect.TypeOf((*MockDB)(nil).DB))
}

// Debug mocks base method
func (_m *MockDB) Debug() gormer.DB {
	ret := _m.ctrl.Call(_m, "Debug")
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Debug indicates an expected call of Debug
func (_mr *MockDBMockRecorder) Debug() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Debug", reflect.TypeOf((*MockDB)(nil).Debug))
}

// Delete mocks base method
func (_m *MockDB) Delete(_param0 interface{}, _param1 ...interface{}) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Delete", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockDBMockRecorder) Delete(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockDB)(nil).Delete), _s...)
}

// Dialect mocks base method
func (_m *MockDB) Dialect() gorm.Dialect {
	ret := _m.ctrl.Call(_m, "Dialect")
	ret0, _ := ret[0].(gorm.Dialect)
	return ret0
}

// Dialect indicates an expected call of Dialect
func (_mr *MockDBMockRecorder) Dialect() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Dialect", reflect.TypeOf((*MockDB)(nil).Dialect))
}

// DropColumn mocks base method
func (_m *MockDB) DropColumn(_param0 string) gormer.DB {
	ret := _m.ctrl.Call(_m, "DropColumn", _param0)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// DropColumn indicates an expected call of DropColumn
func (_mr *MockDBMockRecorder) DropColumn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DropColumn", reflect.TypeOf((*MockDB)(nil).DropColumn), arg0)
}

// DropTable mocks base method
func (_m *MockDB) DropTable(_param0 ...interface{}) gormer.DB {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DropTable", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// DropTable indicates an expected call of DropTable
func (_mr *MockDBMockRecorder) DropTable(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DropTable", reflect.TypeOf((*MockDB)(nil).DropTable), arg0...)
}

// DropTableIfExists mocks base method
func (_m *MockDB) DropTableIfExists(_param0 ...interface{}) gormer.DB {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DropTableIfExists", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// DropTableIfExists indicates an expected call of DropTableIfExists
func (_mr *MockDBMockRecorder) DropTableIfExists(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DropTableIfExists", reflect.TypeOf((*MockDB)(nil).DropTableIfExists), arg0...)
}

// Error mocks base method
func (_m *MockDB) Error() error {
	ret := _m.ctrl.Call(_m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error
func (_mr *MockDBMockRecorder) Error() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Error", reflect.TypeOf((*MockDB)(nil).Error))
}

// Exec mocks base method
func (_m *MockDB) Exec(_param0 string, _param1 ...interface{}) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Exec", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Exec indicates an expected call of Exec
func (_mr *MockDBMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Exec", reflect.TypeOf((*MockDB)(nil).Exec), _s...)
}

// Find mocks base method
func (_m *MockDB) Find(_param0 interface{}, _param1 ...interface{}) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Find", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Find indicates an expected call of Find
func (_mr *MockDBMockRecorder) Find(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Find", reflect.TypeOf((*MockDB)(nil).Find), _s...)
}

// First mocks base method
func (_m *MockDB) First(_param0 interface{}, _param1 ...interface{}) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "First", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// First indicates an expected call of First
func (_mr *MockDBMockRecorder) First(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "First", reflect.TypeOf((*MockDB)(nil).First), _s...)
}

// FirstOrCreate mocks base method
func (_m *MockDB) FirstOrCreate(_param0 interface{}, _param1 ...interface{}) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "FirstOrCreate", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// FirstOrCreate indicates an expected call of FirstOrCreate
func (_mr *MockDBMockRecorder) FirstOrCreate(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FirstOrCreate", reflect.TypeOf((*MockDB)(nil).FirstOrCreate), _s...)
}

// FirstOrInit mocks base method
func (_m *MockDB) FirstOrInit(_param0 interface{}, _param1 ...interface{}) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "FirstOrInit", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// FirstOrInit indicates an expected call of FirstOrInit
func (_mr *MockDBMockRecorder) FirstOrInit(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FirstOrInit", reflect.TypeOf((*MockDB)(nil).FirstOrInit), _s...)
}

// Get mocks base method
func (_m *MockDB) Get(_param0 string) (interface{}, bool) {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockDBMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockDB)(nil).Get), arg0)
}

// GetErrors mocks base method
func (_m *MockDB) GetErrors() []error {
	ret := _m.ctrl.Call(_m, "GetErrors")
	ret0, _ := ret[0].([]error)
	return ret0
}

// GetErrors indicates an expected call of GetErrors
func (_mr *MockDBMockRecorder) GetErrors() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetErrors", reflect.TypeOf((*MockDB)(nil).GetErrors))
}

// Group mocks base method
func (_m *MockDB) Group(_param0 string) gormer.DB {
	ret := _m.ctrl.Call(_m, "Group", _param0)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Group indicates an expected call of Group
func (_mr *MockDBMockRecorder) Group(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Group", reflect.TypeOf((*MockDB)(nil).Group), arg0)
}

// HasBlockGlobalUpdate mocks base method
func (_m *MockDB) HasBlockGlobalUpdate() bool {
	ret := _m.ctrl.Call(_m, "HasBlockGlobalUpdate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasBlockGlobalUpdate indicates an expected call of HasBlockGlobalUpdate
func (_mr *MockDBMockRecorder) HasBlockGlobalUpdate() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HasBlockGlobalUpdate", reflect.TypeOf((*MockDB)(nil).HasBlockGlobalUpdate))
}

// HasTable mocks base method
func (_m *MockDB) HasTable(_param0 interface{}) bool {
	ret := _m.ctrl.Call(_m, "HasTable", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasTable indicates an expected call of HasTable
func (_mr *MockDBMockRecorder) HasTable(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HasTable", reflect.TypeOf((*MockDB)(nil).HasTable), arg0)
}

// Having mocks base method
func (_m *MockDB) Having(_param0 interface{}, _param1 ...interface{}) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Having", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Having indicates an expected call of Having
func (_mr *MockDBMockRecorder) Having(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Having", reflect.TypeOf((*MockDB)(nil).Having), _s...)
}

// InstantSet mocks base method
func (_m *MockDB) InstantSet(_param0 string, _param1 interface{}) gormer.DB {
	ret := _m.ctrl.Call(_m, "InstantSet", _param0, _param1)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// InstantSet indicates an expected call of InstantSet
func (_mr *MockDBMockRecorder) InstantSet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InstantSet", reflect.TypeOf((*MockDB)(nil).InstantSet), arg0, arg1)
}

// Joins mocks base method
func (_m *MockDB) Joins(_param0 string, _param1 ...interface{}) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Joins", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Joins indicates an expected call of Joins
func (_mr *MockDBMockRecorder) Joins(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Joins", reflect.TypeOf((*MockDB)(nil).Joins), _s...)
}

// Last mocks base method
func (_m *MockDB) Last(_param0 interface{}, _param1 ...interface{}) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Last", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Last indicates an expected call of Last
func (_mr *MockDBMockRecorder) Last(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Last", reflect.TypeOf((*MockDB)(nil).Last), _s...)
}

// Limit mocks base method
func (_m *MockDB) Limit(_param0 interface{}) gormer.DB {
	ret := _m.ctrl.Call(_m, "Limit", _param0)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Limit indicates an expected call of Limit
func (_mr *MockDBMockRecorder) Limit(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Limit", reflect.TypeOf((*MockDB)(nil).Limit), arg0)
}

// LogMode mocks base method
func (_m *MockDB) LogMode(_param0 bool) gormer.DB {
	ret := _m.ctrl.Call(_m, "LogMode", _param0)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// LogMode indicates an expected call of LogMode
func (_mr *MockDBMockRecorder) LogMode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LogMode", reflect.TypeOf((*MockDB)(nil).LogMode), arg0)
}

// Model mocks base method
func (_m *MockDB) Model(_param0 interface{}) gormer.DB {
	ret := _m.ctrl.Call(_m, "Model", _param0)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Model indicates an expected call of Model
func (_mr *MockDBMockRecorder) Model(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Model", reflect.TypeOf((*MockDB)(nil).Model), arg0)
}

// ModifyColumn mocks base method
func (_m *MockDB) ModifyColumn(_param0 string, _param1 string) gormer.DB {
	ret := _m.ctrl.Call(_m, "ModifyColumn", _param0, _param1)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// ModifyColumn indicates an expected call of ModifyColumn
func (_mr *MockDBMockRecorder) ModifyColumn(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ModifyColumn", reflect.TypeOf((*MockDB)(nil).ModifyColumn), arg0, arg1)
}

// New mocks base method
func (_m *MockDB) New() *gorm.DB {
	ret := _m.ctrl.Call(_m, "New")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// New indicates an expected call of New
func (_mr *MockDBMockRecorder) New() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "New", reflect.TypeOf((*MockDB)(nil).New))
}

// NewRecord mocks base method
func (_m *MockDB) NewRecord(_param0 interface{}) bool {
	ret := _m.ctrl.Call(_m, "NewRecord", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// NewRecord indicates an expected call of NewRecord
func (_mr *MockDBMockRecorder) NewRecord(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NewRecord", reflect.TypeOf((*MockDB)(nil).NewRecord), arg0)
}

// NewScope mocks base method
func (_m *MockDB) NewScope(_param0 interface{}) *gorm.Scope {
	ret := _m.ctrl.Call(_m, "NewScope", _param0)
	ret0, _ := ret[0].(*gorm.Scope)
	return ret0
}

// NewScope indicates an expected call of NewScope
func (_mr *MockDBMockRecorder) NewScope(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NewScope", reflect.TypeOf((*MockDB)(nil).NewScope), arg0)
}

// Not mocks base method
func (_m *MockDB) Not(_param0 interface{}, _param1 ...interface{}) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Not", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Not indicates an expected call of Not
func (_mr *MockDBMockRecorder) Not(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Not", reflect.TypeOf((*MockDB)(nil).Not), _s...)
}

// Offset mocks base method
func (_m *MockDB) Offset(_param0 interface{}) gormer.DB {
	ret := _m.ctrl.Call(_m, "Offset", _param0)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Offset indicates an expected call of Offset
func (_mr *MockDBMockRecorder) Offset(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Offset", reflect.TypeOf((*MockDB)(nil).Offset), arg0)
}

// Omit mocks base method
func (_m *MockDB) Omit(_param0 ...string) gormer.DB {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Omit", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Omit indicates an expected call of Omit
func (_mr *MockDBMockRecorder) Omit(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Omit", reflect.TypeOf((*MockDB)(nil).Omit), arg0...)
}

// Or mocks base method
func (_m *MockDB) Or(_param0 interface{}, _param1 ...interface{}) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Or", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Or indicates an expected call of Or
func (_mr *MockDBMockRecorder) Or(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Or", reflect.TypeOf((*MockDB)(nil).Or), _s...)
}

// Order mocks base method
func (_m *MockDB) Order(_param0 interface{}, _param1 ...bool) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Order", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Order indicates an expected call of Order
func (_mr *MockDBMockRecorder) Order(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Order", reflect.TypeOf((*MockDB)(nil).Order), _s...)
}

// Pluck mocks base method
func (_m *MockDB) Pluck(_param0 string, _param1 interface{}) gormer.DB {
	ret := _m.ctrl.Call(_m, "Pluck", _param0, _param1)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Pluck indicates an expected call of Pluck
func (_mr *MockDBMockRecorder) Pluck(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Pluck", reflect.TypeOf((*MockDB)(nil).Pluck), arg0, arg1)
}

// Preload mocks base method
func (_m *MockDB) Preload(_param0 string, _param1 ...interface{}) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Preload", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Preload indicates an expected call of Preload
func (_mr *MockDBMockRecorder) Preload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Preload", reflect.TypeOf((*MockDB)(nil).Preload), _s...)
}

// Raw mocks base method
func (_m *MockDB) Raw(_param0 string, _param1 ...interface{}) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Raw", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Raw indicates an expected call of Raw
func (_mr *MockDBMockRecorder) Raw(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Raw", reflect.TypeOf((*MockDB)(nil).Raw), _s...)
}

// RecordNotFound mocks base method
func (_m *MockDB) RecordNotFound() bool {
	ret := _m.ctrl.Call(_m, "RecordNotFound")
	ret0, _ := ret[0].(bool)
	return ret0
}

// RecordNotFound indicates an expected call of RecordNotFound
func (_mr *MockDBMockRecorder) RecordNotFound() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RecordNotFound", reflect.TypeOf((*MockDB)(nil).RecordNotFound))
}

// Related mocks base method
func (_m *MockDB) Related(_param0 interface{}, _param1 ...string) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Related", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Related indicates an expected call of Related
func (_mr *MockDBMockRecorder) Related(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Related", reflect.TypeOf((*MockDB)(nil).Related), _s...)
}

// RemoveForeignKey mocks base method
func (_m *MockDB) RemoveForeignKey(_param0 string, _param1 string) gormer.DB {
	ret := _m.ctrl.Call(_m, "RemoveForeignKey", _param0, _param1)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// RemoveForeignKey indicates an expected call of RemoveForeignKey
func (_mr *MockDBMockRecorder) RemoveForeignKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RemoveForeignKey", reflect.TypeOf((*MockDB)(nil).RemoveForeignKey), arg0, arg1)
}

// RemoveIndex mocks base method
func (_m *MockDB) RemoveIndex(_param0 string) gormer.DB {
	ret := _m.ctrl.Call(_m, "RemoveIndex", _param0)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// RemoveIndex indicates an expected call of RemoveIndex
func (_mr *MockDBMockRecorder) RemoveIndex(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RemoveIndex", reflect.TypeOf((*MockDB)(nil).RemoveIndex), arg0)
}

// Rollback mocks base method
func (_m *MockDB) Rollback() gormer.DB {
	ret := _m.ctrl.Call(_m, "Rollback")
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (_mr *MockDBMockRecorder) Rollback() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Rollback", reflect.TypeOf((*MockDB)(nil).Rollback))
}

// Row mocks base method
func (_m *MockDB) Row() *sql.Row {
	ret := _m.ctrl.Call(_m, "Row")
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// Row indicates an expected call of Row
func (_mr *MockDBMockRecorder) Row() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Row", reflect.TypeOf((*MockDB)(nil).Row))
}

// Rows mocks base method
func (_m *MockDB) Rows() (*sql.Rows, error) {
	ret := _m.ctrl.Call(_m, "Rows")
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rows indicates an expected call of Rows
func (_mr *MockDBMockRecorder) Rows() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Rows", reflect.TypeOf((*MockDB)(nil).Rows))
}

// Save mocks base method
func (_m *MockDB) Save(_param0 interface{}) gormer.DB {
	ret := _m.ctrl.Call(_m, "Save", _param0)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Save indicates an expected call of Save
func (_mr *MockDBMockRecorder) Save(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Save", reflect.TypeOf((*MockDB)(nil).Save), arg0)
}

// Scan mocks base method
func (_m *MockDB) Scan(_param0 interface{}) gormer.DB {
	ret := _m.ctrl.Call(_m, "Scan", _param0)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Scan indicates an expected call of Scan
func (_mr *MockDBMockRecorder) Scan(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Scan", reflect.TypeOf((*MockDB)(nil).Scan), arg0)
}

// ScanRows mocks base method
func (_m *MockDB) ScanRows(_param0 *sql.Rows, _param1 interface{}) error {
	ret := _m.ctrl.Call(_m, "ScanRows", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanRows indicates an expected call of ScanRows
func (_mr *MockDBMockRecorder) ScanRows(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ScanRows", reflect.TypeOf((*MockDB)(nil).ScanRows), arg0, arg1)
}

// Scopes mocks base method
func (_m *MockDB) Scopes(_param0 ...func(*gorm.DB) *gorm.DB) gormer.DB {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Scopes", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Scopes indicates an expected call of Scopes
func (_mr *MockDBMockRecorder) Scopes(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Scopes", reflect.TypeOf((*MockDB)(nil).Scopes), arg0...)
}

// Select mocks base method
func (_m *MockDB) Select(_param0 interface{}, _param1 ...interface{}) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Select", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Select indicates an expected call of Select
func (_mr *MockDBMockRecorder) Select(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Select", reflect.TypeOf((*MockDB)(nil).Select), _s...)
}

// Set mocks base method
func (_m *MockDB) Set(_param0 string, _param1 interface{}) gormer.DB {
	ret := _m.ctrl.Call(_m, "Set", _param0, _param1)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Set indicates an expected call of Set
func (_mr *MockDBMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Set", reflect.TypeOf((*MockDB)(nil).Set), arg0, arg1)
}

// SetJoinTableHandler mocks base method
func (_m *MockDB) SetJoinTableHandler(_param0 interface{}, _param1 string, _param2 gorm.JoinTableHandlerInterface) {
	_m.ctrl.Call(_m, "SetJoinTableHandler", _param0, _param1, _param2)
}

// SetJoinTableHandler indicates an expected call of SetJoinTableHandler
func (_mr *MockDBMockRecorder) SetJoinTableHandler(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetJoinTableHandler", reflect.TypeOf((*MockDB)(nil).SetJoinTableHandler), arg0, arg1, arg2)
}

// SetLogger mocks base method
func (_m *MockDB) SetLogger(_param0 *gorm.Logger) {
	_m.ctrl.Call(_m, "SetLogger", _param0)
}

// SetLogger indicates an expected call of SetLogger
func (_mr *MockDBMockRecorder) SetLogger(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetLogger", reflect.TypeOf((*MockDB)(nil).SetLogger), arg0)
}

// SingularTable mocks base method
func (_m *MockDB) SingularTable(_param0 bool) {
	_m.ctrl.Call(_m, "SingularTable", _param0)
}

// SingularTable indicates an expected call of SingularTable
func (_mr *MockDBMockRecorder) SingularTable(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SingularTable", reflect.TypeOf((*MockDB)(nil).SingularTable), arg0)
}

// Table mocks base method
func (_m *MockDB) Table(_param0 string) gormer.DB {
	ret := _m.ctrl.Call(_m, "Table", _param0)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Table indicates an expected call of Table
func (_mr *MockDBMockRecorder) Table(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Table", reflect.TypeOf((*MockDB)(nil).Table), arg0)
}

// Take mocks base method
func (_m *MockDB) Take(_param0 interface{}, _param1 ...interface{}) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Take", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Take indicates an expected call of Take
func (_mr *MockDBMockRecorder) Take(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Take", reflect.TypeOf((*MockDB)(nil).Take), _s...)
}

// Unscoped mocks base method
func (_m *MockDB) Unscoped() gormer.DB {
	ret := _m.ctrl.Call(_m, "Unscoped")
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Unscoped indicates an expected call of Unscoped
func (_mr *MockDBMockRecorder) Unscoped() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Unscoped", reflect.TypeOf((*MockDB)(nil).Unscoped))
}

// Update mocks base method
func (_m *MockDB) Update(_param0 ...interface{}) gormer.DB {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Update", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Update indicates an expected call of Update
func (_mr *MockDBMockRecorder) Update(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockDB)(nil).Update), arg0...)
}

// UpdateColumn mocks base method
func (_m *MockDB) UpdateColumn(_param0 ...interface{}) gormer.DB {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateColumn", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// UpdateColumn indicates an expected call of UpdateColumn
func (_mr *MockDBMockRecorder) UpdateColumn(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdateColumn", reflect.TypeOf((*MockDB)(nil).UpdateColumn), arg0...)
}

// UpdateColumns mocks base method
func (_m *MockDB) UpdateColumns(_param0 interface{}) gormer.DB {
	ret := _m.ctrl.Call(_m, "UpdateColumns", _param0)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// UpdateColumns indicates an expected call of UpdateColumns
func (_mr *MockDBMockRecorder) UpdateColumns(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdateColumns", reflect.TypeOf((*MockDB)(nil).UpdateColumns), arg0)
}

// Updates mocks base method
func (_m *MockDB) Updates(_param0 interface{}, _param1 ...bool) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Updates", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Updates indicates an expected call of Updates
func (_mr *MockDBMockRecorder) Updates(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Updates", reflect.TypeOf((*MockDB)(nil).Updates), _s...)
}

// Where mocks base method
func (_m *MockDB) Where(_param0 interface{}, _param1 ...interface{}) gormer.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Where", _s...)
	ret0, _ := ret[0].(gormer.DB)
	return ret0
}

// Where indicates an expected call of Where
func (_mr *MockDBMockRecorder) Where(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Where", reflect.TypeOf((*MockDB)(nil).Where), _s...)
}
