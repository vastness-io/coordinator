// Code generated by protoc-gen-go. DO NOT EDIT.
// source: project.proto

package project

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetProjectMessage struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *GetProjectMessage) Reset()                    { *m = GetProjectMessage{} }
func (m *GetProjectMessage) String() string            { return proto.CompactTextString(m) }
func (*GetProjectMessage) ProtoMessage()               {}
func (*GetProjectMessage) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *GetProjectMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetProjectMessage) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Project struct {
	Name         string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type         string        `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Repositories []*Repository `protobuf:"bytes,3,rep,name=repositories" json:"repositories,omitempty"`
}

func (m *Project) Reset()                    { *m = Project{} }
func (m *Project) String() string            { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()               {}
func (*Project) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Project) GetRepositories() []*Repository {
	if m != nil {
		return m.Repositories
	}
	return nil
}

type GetProjectsResponse struct {
	Projects []*Project `protobuf:"bytes,1,rep,name=projects" json:"projects,omitempty"`
}

func (m *GetProjectsResponse) Reset()                    { *m = GetProjectsResponse{} }
func (m *GetProjectsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetProjectsResponse) ProtoMessage()               {}
func (*GetProjectsResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *GetProjectsResponse) GetProjects() []*Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

func init() {
	proto.RegisterType((*GetProjectMessage)(nil), "project.GetProjectMessage")
	proto.RegisterType((*Project)(nil), "project.Project")
	proto.RegisterType((*GetProjectsResponse)(nil), "project.GetProjectsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Projects service

type ProjectsClient interface {
	GetProjects(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*GetProjectsResponse, error)
	GetProject(ctx context.Context, in *GetProjectMessage, opts ...grpc.CallOption) (*Project, error)
}

type projectsClient struct {
	cc *grpc.ClientConn
}

func NewProjectsClient(cc *grpc.ClientConn) ProjectsClient {
	return &projectsClient{cc}
}

func (c *projectsClient) GetProjects(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*GetProjectsResponse, error) {
	out := new(GetProjectsResponse)
	err := grpc.Invoke(ctx, "/project.Projects/GetProjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) GetProject(ctx context.Context, in *GetProjectMessage, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := grpc.Invoke(ctx, "/project.Projects/GetProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Projects service

type ProjectsServer interface {
	GetProjects(context.Context, *google_protobuf.Empty) (*GetProjectsResponse, error)
	GetProject(context.Context, *GetProjectMessage) (*Project, error)
}

func RegisterProjectsServer(s *grpc.Server, srv ProjectsServer) {
	s.RegisterService(&_Projects_serviceDesc, srv)
}

func _Projects_GetProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).GetProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Projects/GetProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).GetProjects(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Projects/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).GetProject(ctx, req.(*GetProjectMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Projects_serviceDesc = grpc.ServiceDesc{
	ServiceName: "project.Projects",
	HandlerType: (*ProjectsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjects",
			Handler:    _Projects_GetProjects_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Projects_GetProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "project.proto",
}

func init() { proto.RegisterFile("project.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x50, 0xcd, 0x4a, 0x03, 0x31,
	0x10, 0x66, 0xad, 0xd8, 0x3a, 0x55, 0xa8, 0x53, 0x90, 0x25, 0x7a, 0x28, 0x7b, 0xea, 0x41, 0x52,
	0xa8, 0x07, 0x41, 0x8f, 0x45, 0x3c, 0x09, 0x92, 0x37, 0x68, 0x65, 0x5c, 0x5a, 0x6c, 0x27, 0x64,
	0xe2, 0xa1, 0xcf, 0xe0, 0x4b, 0xcb, 0x26, 0xd9, 0x54, 0x71, 0x0f, 0xbd, 0x4d, 0x3e, 0xbe, 0xbf,
	0x7c, 0x70, 0x69, 0x1d, 0x6f, 0xe8, 0xdd, 0x6b, 0xeb, 0xd8, 0x33, 0xf6, 0xd3, 0x53, 0xdd, 0xd4,
	0xcc, 0xf5, 0x27, 0xcd, 0x02, 0xbc, 0xfa, 0xfa, 0x98, 0xd1, 0xd6, 0xfa, 0x7d, 0x64, 0xa9, 0x91,
	0x23, 0xcb, 0xb2, 0xf6, 0xec, 0x12, 0x52, 0x3d, 0xc1, 0xd5, 0x0b, 0xf9, 0xb7, 0x28, 0x7e, 0x25,
	0x91, 0x65, 0x4d, 0x88, 0x70, 0xba, 0x5b, 0x6e, 0xa9, 0x2c, 0x26, 0xc5, 0xf4, 0xdc, 0x84, 0xbb,
	0xc1, 0xfc, 0xde, 0x52, 0x79, 0x12, 0xb1, 0xe6, 0xae, 0x36, 0xd0, 0x4f, 0xca, 0x63, 0x25, 0xf8,
	0x00, 0x17, 0xb9, 0xc3, 0x9a, 0xa4, 0xec, 0x4d, 0x7a, 0xd3, 0xe1, 0x7c, 0xac, 0xdb, 0xdf, 0x98,
	0x5c, 0xd0, 0xfc, 0x21, 0x56, 0x0b, 0x18, 0x1f, 0x8a, 0x8a, 0x21, 0xb1, 0xbc, 0x13, 0xc2, 0x3b,
	0x18, 0x24, 0xa9, 0x94, 0x45, 0xf0, 0x1a, 0x65, 0xaf, 0x44, 0x36, 0x99, 0x31, 0xff, 0x2e, 0x60,
	0xd0, 0x5a, 0xe0, 0x02, 0x86, 0xbf, 0x1c, 0xf1, 0x5a, 0xc7, 0xe5, 0x74, 0xbb, 0x9c, 0x7e, 0x6e,
	0x96, 0x53, 0xb7, 0xd9, 0xaf, 0x2b, 0xff, 0x11, 0xe0, 0x00, 0xa3, 0xea, 0xe0, 0xa6, 0x51, 0xd5,
	0xbf, 0x5e, 0xab, 0xb3, 0x90, 0x74, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x0e, 0x2b, 0xa4,
	0xcb, 0x01, 0x00, 0x00,
}
