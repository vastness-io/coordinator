// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vastness-io/linguist-svc (interfaces: LinguistClient,LinguistServer)

package mock_linguist_svc

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	linguist_svc "github.com/vastness-io/linguist-svc"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockLinguistClient is a mock of LinguistClient interface
type MockLinguistClient struct {
	ctrl     *gomock.Controller
	recorder *MockLinguistClientMockRecorder
}

// MockLinguistClientMockRecorder is the mock recorder for MockLinguistClient
type MockLinguistClientMockRecorder struct {
	mock *MockLinguistClient
}

// NewMockLinguistClient creates a new mock instance
func NewMockLinguistClient(ctrl *gomock.Controller) *MockLinguistClient {
	mock := &MockLinguistClient{ctrl: ctrl}
	mock.recorder = &MockLinguistClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockLinguistClient) EXPECT() *MockLinguistClientMockRecorder {
	return _m.recorder
}

// GetLanguages mocks base method
func (_m *MockLinguistClient) GetLanguages(_param0 context.Context, _param1 *linguist_svc.LanguageRequest, _param2 ...grpc.CallOption) (*linguist_svc.LanguageResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetLanguages", _s...)
	ret0, _ := ret[0].(*linguist_svc.LanguageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguages indicates an expected call of GetLanguages
func (_mr *MockLinguistClientMockRecorder) GetLanguages(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetLanguages", reflect.TypeOf((*MockLinguistClient)(nil).GetLanguages), _s...)
}

// MockLinguistServer is a mock of LinguistServer interface
type MockLinguistServer struct {
	ctrl     *gomock.Controller
	recorder *MockLinguistServerMockRecorder
}

// MockLinguistServerMockRecorder is the mock recorder for MockLinguistServer
type MockLinguistServerMockRecorder struct {
	mock *MockLinguistServer
}

// NewMockLinguistServer creates a new mock instance
func NewMockLinguistServer(ctrl *gomock.Controller) *MockLinguistServer {
	mock := &MockLinguistServer{ctrl: ctrl}
	mock.recorder = &MockLinguistServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockLinguistServer) EXPECT() *MockLinguistServerMockRecorder {
	return _m.recorder
}

// GetLanguages mocks base method
func (_m *MockLinguistServer) GetLanguages(_param0 context.Context, _param1 *linguist_svc.LanguageRequest) (*linguist_svc.LanguageResponse, error) {
	ret := _m.ctrl.Call(_m, "GetLanguages", _param0, _param1)
	ret0, _ := ret[0].(*linguist_svc.LanguageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguages indicates an expected call of GetLanguages
func (_mr *MockLinguistServerMockRecorder) GetLanguages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetLanguages", reflect.TypeOf((*MockLinguistServer)(nil).GetLanguages), arg0, arg1)
}
