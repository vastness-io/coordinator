// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vastness-io/linguist-svc (interfaces: LinguistClient,LinguistServer)

// Package mock_linguist_svc is a generated GoMock package.
package mock_linguist_svc

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	linguist_svc "github.com/vastness-io/linguist-svc"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockLinguistClient is a mock of LinguistClient interface
type MockLinguistClient struct {
	ctrl     *gomock.Controller
	recorder *MockLinguistClientMockRecorder
}

// MockLinguistClientMockRecorder is the mock recorder for MockLinguistClient
type MockLinguistClientMockRecorder struct {
	mock *MockLinguistClient
}

// NewMockLinguistClient creates a new mock instance
func NewMockLinguistClient(ctrl *gomock.Controller) *MockLinguistClient {
	mock := &MockLinguistClient{ctrl: ctrl}
	mock.recorder = &MockLinguistClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLinguistClient) EXPECT() *MockLinguistClientMockRecorder {
	return m.recorder
}

// GetLanguages mocks base method
func (m *MockLinguistClient) GetLanguages(arg0 context.Context, arg1 *linguist_svc.LanguageRequest, arg2 ...grpc.CallOption) (*linguist_svc.LanguageResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLanguages", varargs...)
	ret0, _ := ret[0].(*linguist_svc.LanguageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguages indicates an expected call of GetLanguages
func (mr *MockLinguistClientMockRecorder) GetLanguages(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguages", reflect.TypeOf((*MockLinguistClient)(nil).GetLanguages), varargs...)
}

// MockLinguistServer is a mock of LinguistServer interface
type MockLinguistServer struct {
	ctrl     *gomock.Controller
	recorder *MockLinguistServerMockRecorder
}

// MockLinguistServerMockRecorder is the mock recorder for MockLinguistServer
type MockLinguistServerMockRecorder struct {
	mock *MockLinguistServer
}

// NewMockLinguistServer creates a new mock instance
func NewMockLinguistServer(ctrl *gomock.Controller) *MockLinguistServer {
	mock := &MockLinguistServer{ctrl: ctrl}
	mock.recorder = &MockLinguistServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLinguistServer) EXPECT() *MockLinguistServerMockRecorder {
	return m.recorder
}

// GetLanguages mocks base method
func (m *MockLinguistServer) GetLanguages(arg0 context.Context, arg1 *linguist_svc.LanguageRequest) (*linguist_svc.LanguageResponse, error) {
	ret := m.ctrl.Call(m, "GetLanguages", arg0, arg1)
	ret0, _ := ret[0].(*linguist_svc.LanguageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguages indicates an expected call of GetLanguages
func (mr *MockLinguistServerMockRecorder) GetLanguages(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguages", reflect.TypeOf((*MockLinguistServer)(nil).GetLanguages), arg0, arg1)
}
