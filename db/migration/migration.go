// Code generated by go-bindata.
// sources:
// db/migration/sql/1_create_projects_tables.down.sql
// db/migration/sql/1_create_projects_tables.up.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_create_projects_tablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x70\x0a\x72\xf4\x73\xf6\x88\x77\xf6\xf7\xf5\xf5\x0c\x09\xb6\xe6\xc2\xaa\x08\xbf\x2c\xc4\x08\x57\x5c\xd2\x41\xae\x01\xfe\xc1\x9e\x21\xfe\x41\x9e\x38\x95\x04\x04\xf9\x7b\xb9\x3a\x87\x04\x5b\x03\x02\x00\x00\xff\xff\x33\xfe\x60\x02\xa3\x00\x00\x00")

func _1_create_projects_tablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_projects_tablesDownSql,
		"1_create_projects_tables.down.sql",
	)
}

func _1_create_projects_tablesDownSql() (*asset, error) {
	bytes, err := _1_create_projects_tablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_projects_tables.down.sql", size: 163, mode: os.FileMode(420), modTime: time.Unix(1528813641, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_create_projects_tablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x4d\x6f\xac\x30\x0c\xbc\xf3\x2b\x7c\x04\x89\xd3\x93\xde\xbb\xbc\x93\x37\xf1\x2e\xde\x92\x84\x3a\x61\x2b\x54\x55\xfc\xff\x7f\x51\x85\x05\x36\x7c\xaa\xaa\x6f\x64\x9c\xf1\x30\xe3\x28\x21\x0c\x04\x01\x2f\x35\x41\x23\xee\x4e\x2a\x78\xc8\x33\x00\xd6\x00\xe0\x49\x18\x6b\x68\x84\x0d\x4a\x07\x6f\xd4\x95\x19\x80\x45\x43\xf0\x40\x51\x15\x4a\xfe\xe7\xef\xbf\x02\xac\x0b\x60\xdb\xba\x8e\x68\xe8\x9a\x13\xb4\xb5\xfc\xde\x12\xe4\x91\xa3\x1c\x7a\x8b\xac\xf8\x9f\x65\x0b\x21\x42\x8d\xf3\x1c\x9c\x30\x3d\xc5\x0c\x13\x9f\x95\x32\x47\x42\xf7\x61\x49\xf6\xa1\x41\xc9\x3e\xb4\x94\x31\x70\x8c\x6a\x22\x3a\x1a\xd1\xb3\x9e\x1c\x10\xba\x92\x90\x55\xe4\x13\x97\x58\x17\xe0\x2c\x68\xaa\x29\x10\x28\xf4\x0a\x35\xc5\x93\xb6\xd1\xf8\x3a\xd9\xfe\xdf\x45\xd0\xaa\x6a\xfc\x37\x43\x01\x61\xae\xbb\x77\xf6\x52\x4e\xfe\xcf\x75\x12\xc4\x5c\x87\x9e\xcf\x76\x76\xfd\x89\x91\x49\xd7\x89\xa7\x49\xd7\x89\xbd\x57\x27\xc4\x37\x1b\x75\x42\xbe\x1a\x5f\x6e\x26\x95\x6b\xd6\x22\xb1\x7b\xb9\x0b\xdb\xbc\x7e\x92\xc0\x36\xf1\x5f\x68\xda\xc6\xa8\x9c\x31\x1c\x4e\x53\xf4\x15\x1e\x04\xb4\x8a\xd2\x90\xf7\x78\xa3\x83\x45\x66\x43\x3e\xa0\x69\x22\xf8\xfa\x98\xf2\xc5\x36\x54\x4e\xc6\x6c\xd7\x77\x47\x90\x0c\x72\xbd\x05\xb5\x26\xbd\x2b\xef\xf3\x6b\x50\xe5\x34\x5f\x79\x6c\xd9\xc1\x85\x8c\x7b\x4c\x0c\x2b\xfc\x68\xed\xfb\xd4\xb6\xf1\x28\x2e\x3b\xdb\x90\x3e\xb3\xd7\x1b\x61\x3d\x68\x7d\x5e\xeb\xa3\xa3\x8b\x49\xc9\x9d\x99\xd9\x57\xb8\x78\xe6\xf3\x98\x32\xa1\x89\x89\x7e\x07\x00\x00\xff\xff\xee\xe1\x8c\xea\x00\x05\x00\x00")

func _1_create_projects_tablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_projects_tablesUpSql,
		"1_create_projects_tables.up.sql",
	)
}

func _1_create_projects_tablesUpSql() (*asset, error) {
	bytes, err := _1_create_projects_tablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_projects_tables.up.sql", size: 1280, mode: os.FileMode(420), modTime: time.Unix(1529433176, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_create_projects_tables.down.sql": _1_create_projects_tablesDownSql,
	"1_create_projects_tables.up.sql": _1_create_projects_tablesUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1_create_projects_tables.down.sql": &bintree{_1_create_projects_tablesDownSql, map[string]*bintree{}},
	"1_create_projects_tables.up.sql": &bintree{_1_create_projects_tablesUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

