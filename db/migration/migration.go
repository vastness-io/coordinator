// Code generated by go-bindata.
// sources:
// db/migration/sql/1_create_projects_tables.down.sql
// db/migration/sql/1_create_projects_tables.up.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_create_projects_tablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x70\x0a\x72\xf4\x73\xf6\x88\x77\xf6\xf7\xf5\xf5\x0c\x09\xb6\xe6\xc2\xaa\x08\xbf\x2c\xc4\x08\x57\x5c\xd2\x41\xae\x01\xfe\xc1\x9e\x21\xfe\x41\x9e\x38\x95\x04\x04\xf9\x7b\xb9\x3a\x87\x04\x5b\x03\x02\x00\x00\xff\xff\x33\xfe\x60\x02\xa3\x00\x00\x00")

func _1_create_projects_tablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_projects_tablesDownSql,
		"1_create_projects_tables.down.sql",
	)
}

func _1_create_projects_tablesDownSql() (*asset, error) {
	bytes, err := _1_create_projects_tablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_projects_tables.down.sql", size: 163, mode: os.FileMode(420), modTime: time.Unix(1526500129, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_create_projects_tablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x4d\x6f\xac\x30\x0c\xbc\xf3\x2b\x7c\x04\x89\xd3\x93\xde\xbb\xbc\x93\x37\xf1\x2e\xde\x92\x84\x3a\x61\x2b\x54\x55\xfc\xff\x7f\x51\x85\x65\x21\x7c\xaa\x6a\x6e\x64\x9c\xf1\x30\x63\x2b\x21\x0c\x04\x01\x2f\x35\x41\x23\xee\x4e\x2a\x78\xc8\x33\x00\xd6\x00\xe0\x49\x18\x6b\x68\x84\x0d\x4a\x07\x6f\xd4\x95\x19\x80\x45\x43\xf0\x40\x51\x15\x4a\xfe\xe7\xef\xbf\x02\xac\x0b\x60\xdb\xba\x8e\x68\xe8\x9a\x13\xb4\xb5\xfc\xde\x12\xe4\x91\xa3\x1c\x6a\x8b\xac\xf8\x9f\x65\x0b\x21\x42\x8d\xf3\x1c\x9c\x30\x3d\xc5\x0c\x1d\x9f\x27\x65\x8e\x84\xee\xc3\x92\xec\x43\x83\x92\x7d\x68\x29\x63\xe0\x18\xd5\x44\x74\x34\xa2\x67\xfd\x72\x40\xe8\x4a\x42\x56\x91\x4f\x5c\x62\x5d\x80\xb3\xa0\xa9\xa6\x40\xa0\xd0\x2b\xd4\x14\x6f\xda\x46\xe3\x7c\xb3\xfd\xbf\x8b\xa0\x55\x15\x25\x46\x4f\xe7\xc4\xf1\xe9\x1c\x9a\x6b\x28\xe0\x5c\x76\xf7\xce\x5e\xe2\xf5\x64\x67\xd7\x9f\x18\x99\x54\x9d\x78\x9a\x54\x9d\xd8\x7b\x75\x42\x7c\xb3\x51\x3e\xe4\xab\xf6\xe5\xa6\x53\xb9\x66\x2d\x12\xbb\x97\xb3\xb0\xcd\xeb\x27\x09\x6c\x13\xff\x85\xa6\x6d\x8c\xca\x19\xc3\xe3\xba\xf8\x0a\x0f\x02\x5a\x45\x69\xc8\x7b\xbc\xd1\xc1\xc4\xb2\x21\x1f\xd0\x34\x11\x9c\x3f\x5e\xf9\x62\x1b\x2a\x27\x63\x88\xeb\xb7\x23\x48\x06\xb9\xde\x82\x5a\x93\xde\x95\xf7\xf9\x35\xa8\x72\x9a\xaf\x3c\x96\xec\xe0\x42\xc6\x3d\x5e\x0c\x2b\xfc\x68\xbe\xfb\xd4\x9f\xf1\x2a\x0e\x3b\xdb\x90\xee\xd3\xbc\x0c\xac\x07\xad\xcf\x67\x7d\x74\x74\xd1\x29\x79\x33\x31\xfb\x0a\x17\xfb\x3c\xb5\x29\x13\x9a\x18\xdd\x77\x00\x00\x00\xff\xff\xf4\xb3\x15\x23\xe9\x04\x00\x00")

func _1_create_projects_tablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_projects_tablesUpSql,
		"1_create_projects_tables.up.sql",
	)
}

func _1_create_projects_tablesUpSql() (*asset, error) {
	bytes, err := _1_create_projects_tablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_projects_tables.up.sql", size: 1257, mode: os.FileMode(420), modTime: time.Unix(1526500129, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_create_projects_tables.down.sql": _1_create_projects_tablesDownSql,
	"1_create_projects_tables.up.sql":   _1_create_projects_tablesUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_create_projects_tables.down.sql": &bintree{_1_create_projects_tablesDownSql, map[string]*bintree{}},
	"1_create_projects_tables.up.sql":   &bintree{_1_create_projects_tablesUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
