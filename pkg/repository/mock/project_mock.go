// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vastness-io/coordinator/pkg/repository (interfaces: ProjectRepository)

package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/vastness-io/coordinator/pkg/model"
	repository "github.com/vastness-io/coordinator/pkg/repository"
	reflect "reflect"
)

// MockProjectRepository is a mock of ProjectRepository interface
type MockProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryMockRecorder
}

// MockProjectRepositoryMockRecorder is the mock recorder for MockProjectRepository
type MockProjectRepositoryMockRecorder struct {
	mock *MockProjectRepository
}

// NewMockProjectRepository creates a new mock instance
func NewMockProjectRepository(ctrl *gomock.Controller) *MockProjectRepository {
	mock := &MockProjectRepository{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockProjectRepository) EXPECT() *MockProjectRepositoryMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockProjectRepository) Create(_param0 repository.DB, _param1 *model.Project) error {
	ret := _m.ctrl.Call(_m, "Create", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (_mr *MockProjectRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockProjectRepository)(nil).Create), arg0, arg1)
}

// DB mocks base method
func (_m *MockProjectRepository) DB() repository.DB {
	ret := _m.ctrl.Call(_m, "DB")
	ret0, _ := ret[0].(repository.DB)
	return ret0
}

// DB indicates an expected call of DB
func (_mr *MockProjectRepositoryMockRecorder) DB() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DB", reflect.TypeOf((*MockProjectRepository)(nil).DB))
}

// Delete mocks base method
func (_m *MockProjectRepository) Delete(_param0 repository.DB, _param1 string, _param2 string) (bool, error) {
	ret := _m.ctrl.Call(_m, "Delete", _param0, _param1, _param2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockProjectRepositoryMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockProjectRepository)(nil).Delete), arg0, arg1, arg2)
}

// GetProject mocks base method
func (_m *MockProjectRepository) GetProject(_param0 repository.DB, _param1 string, _param2 string) (*model.Project, error) {
	ret := _m.ctrl.Call(_m, "GetProject", _param0, _param1, _param2)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject
func (_mr *MockProjectRepositoryMockRecorder) GetProject(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetProject", reflect.TypeOf((*MockProjectRepository)(nil).GetProject), arg0, arg1, arg2)
}

// GetProjects mocks base method
func (_m *MockProjectRepository) GetProjects(_param0 repository.DB) ([]*model.Project, error) {
	ret := _m.ctrl.Call(_m, "GetProjects", _param0)
	ret0, _ := ret[0].([]*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects
func (_mr *MockProjectRepositoryMockRecorder) GetProjects(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetProjects", reflect.TypeOf((*MockProjectRepository)(nil).GetProjects), arg0)
}

// Update mocks base method
func (_m *MockProjectRepository) Update(_param0 repository.DB, _param1 *model.Project) error {
	ret := _m.ctrl.Call(_m, "Update", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (_mr *MockProjectRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockProjectRepository)(nil).Update), arg0, arg1)
}
