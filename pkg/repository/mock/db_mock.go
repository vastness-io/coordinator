// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vastness-io/coordinator/pkg/repository (interfaces: DB)

package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	repository "github.com/vastness-io/coordinator/pkg/repository"
	reflect "reflect"
)

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDB) EXPECT() *MockDBMockRecorder {
	return _m.recorder
}

// Begin mocks base method
func (_m *MockDB) Begin() repository.DB {
	ret := _m.ctrl.Call(_m, "Begin")
	ret0, _ := ret[0].(repository.DB)
	return ret0
}

// Begin indicates an expected call of Begin
func (_mr *MockDBMockRecorder) Begin() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Begin", reflect.TypeOf((*MockDB)(nil).Begin))
}

// Commit mocks base method
func (_m *MockDB) Commit() repository.DB {
	ret := _m.ctrl.Call(_m, "Commit")
	ret0, _ := ret[0].(repository.DB)
	return ret0
}

// Commit indicates an expected call of Commit
func (_mr *MockDBMockRecorder) Commit() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Commit", reflect.TypeOf((*MockDB)(nil).Commit))
}

// Create mocks base method
func (_m *MockDB) Create(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "Create", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (_mr *MockDBMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockDB)(nil).Create), arg0)
}

// Delete mocks base method
func (_m *MockDB) Delete(_param0 interface{}, _param1 ...interface{}) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Delete", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockDBMockRecorder) Delete(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockDB)(nil).Delete), _s...)
}

// Find mocks base method
func (_m *MockDB) Find(_param0 interface{}, _param1 ...interface{}) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Find", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find
func (_mr *MockDBMockRecorder) Find(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Find", reflect.TypeOf((*MockDB)(nil).Find), _s...)
}

// First mocks base method
func (_m *MockDB) First(_param0 interface{}, _param1 ...interface{}) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "First", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// First indicates an expected call of First
func (_mr *MockDBMockRecorder) First(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "First", reflect.TypeOf((*MockDB)(nil).First), _s...)
}

// GetError mocks base method
func (_m *MockDB) GetError() error {
	ret := _m.ctrl.Call(_m, "GetError")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetError indicates an expected call of GetError
func (_mr *MockDBMockRecorder) GetError() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetError", reflect.TypeOf((*MockDB)(nil).GetError))
}

// Preload mocks base method
func (_m *MockDB) Preload(_param0 string, _param1 ...interface{}) repository.DB {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Preload", _s...)
	ret0, _ := ret[0].(repository.DB)
	return ret0
}

// Preload indicates an expected call of Preload
func (_mr *MockDBMockRecorder) Preload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Preload", reflect.TypeOf((*MockDB)(nil).Preload), _s...)
}

// Rollback mocks base method
func (_m *MockDB) Rollback() repository.DB {
	ret := _m.ctrl.Call(_m, "Rollback")
	ret0, _ := ret[0].(repository.DB)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (_mr *MockDBMockRecorder) Rollback() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Rollback", reflect.TypeOf((*MockDB)(nil).Rollback))
}

// Save mocks base method
func (_m *MockDB) Save(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "Save", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (_mr *MockDBMockRecorder) Save(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Save", reflect.TypeOf((*MockDB)(nil).Save), arg0)
}
